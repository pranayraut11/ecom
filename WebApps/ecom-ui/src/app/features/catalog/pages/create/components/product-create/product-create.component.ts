import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Product } from 'src/app/shared/models/product.model';
import { ProductRestService } from 'src/app/shared/services/rest-services/product-rest-service';

@Component({
  selector: 'app-product-create',
  templateUrl: './product-create.component.html',
  styleUrls: ['./product-create.component.css'],
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule]
})
export class ProductCreateComponent implements OnInit {
  imageFile: File;
  formData: FormGroup;
  submitted = false;

  constructor(private productRest: ProductRestService, private formBuilder: FormBuilder) {
    this.formData = this.formBuilder.group({
      name: ['', [Validators.required]],
      description: ['', [Validators.required]],
      images: ['', [Validators.required]],
      price: ['', [Validators.required, Validators.min(0)]],
      originalPrice: ['', [Validators.min(0)]],
      brand: ['', [Validators.required]]
    });
  }

  ngOnInit(): void {}

  onFileSelect($files: FileList) {
    if ($files && $files.length > 0) {
      this.imageFile = $files[0];
    }
  }

  createProduct() {
    if (this.formData.valid && this.imageFile) {
      const formValue = this.formData.value;
      const discount = formValue.originalPrice ? 
        Math.round(((formValue.originalPrice - formValue.price) / formValue.originalPrice) * 100) : 0;

      const product = new Product(
        null, // id will be generated by backend
        formValue.name,
        formValue.description,
        formValue.price,
        [], // images array will be populated by backend
        null, // imageUrl will be set by backend
        formValue.brand,
        0, // initial rating
        formValue.originalPrice,
        
      );

      this.productRest.createProduct(product, this.imageFile).subscribe({
        next: (response) => {
          console.log('Product created successfully:', response);
          this.formData.reset();
          this.imageFile = null;
          // TODO: Show success message to user
        },
        error: (error) => {
          console.error('Error creating product:', error);
          // TODO: Show error message to user
        }
      });
    } else {
      this.markFormGroupTouched(this.formData);
    }
  }

  private markFormGroupTouched(formGroup: FormGroup) {
    Object.values(formGroup.controls).forEach(control => {
      control.markAsTouched();
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      }
    });
  }


  }

