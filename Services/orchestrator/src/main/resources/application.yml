server:
  port: 8083

############## Database #################
spring:
  application:
    name: orchestrator
  data:
    mongodb:
      authentication-database: admin
      uri: mongodb://127.0.0.1:27017/?compressors=zlib&readPreference=primary&gssapiServiceName=mongodb&appname=MongoDB%20Compass&ssl=false
      database: inventory
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:6080/realms/master
          jwk-set-uri: http://localhost:6080/realms/master/protocol/openid-connect/certs
  cloud:
    function:
      definition: blockInventoryStatus;unBlockInventoryStatus;createPaymentStatus;revertPaymentStatus
    stream:
      kafka:
        binder:
          brokers:
            - localhost:9092
      bindings:
        blockInventory-out-0:
          destination: order.inventory.block
          group: ${spring.application.name}
        blockInventoryStatus-in-0:
          destination: order.inventory.block.response
          group: ${spring.application.name}
        unBlockInventory-out-0:
          destination: order.inventory.unblock
          group: ${spring.application.name}
        unBlockInventoryStatus-in-0:
          destination: order.inventory.unblock.response
          group: ${spring.application.name}
        createPayment-out-0:
          destination: order.payment.create
        createPaymentStatus-in-0:
          destination: order.payment.create.status
          group: ${spring.application.name}
        revertPayment-out-0:
          destination: order.payment.revert
          group: ${spring.application.name}
        revertPaymentStatus-in-0:
          destination: order.payment.revert.status
          group: ${spring.application.name}


####### Enable/Disable API security
security:
  enabled: true
########################### security details ##################

#spring.security.oauth2.client.provider.ecom.issuer-uri=${auth.client-uri}
#spring.security.oauth2.client.registration.ecom.client-id=${auth.client-id}
#spring.security.oauth2.client.registration.ecom.client-secret=${auth.client-secret}
#spring.security.oauth2.client.registration.ecom.scope=openid
#spring.security.oauth2.client.registration.ecom.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.ecom.redirect-uri=http://localhost:9090/login/oauth2/code/employee-management-api


########################## Kafka #############################
#kafka:
#  server:
#    url: localhost:9092
#  groupid: 12

service:
  endpoints:
    inventory: asd
    payment: asdas

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  fetch-registry: true
  register-with-eureka: true
  instance:
    preferIpAddress: true